const request = require('request'); 
const express = require('express');

var parseLine = function(line) {
  var url = 'http://assembler-parse-line:80/';
  return new Promise((resolve, reject) => {
    var options = {
      method: 'post',
      body: { line: line },
      json: true,
      url: url
    }

    request.post(options, (e, response, body) => {
      resolve(body);
    })
  });
}

async function assembler(input) {
  // Split text into code lines
  var lines = input.split('\n');

  // Contains the program code & data generated by the assembler
  var code = [];
  // Hash map of label used to replace the labels after the assembler generated the code
  var labels = {};

  var addLabel = function (label) {
    var upperLabel = label.toUpperCase();

    if (upperLabel === "A" || upperLabel === "B" || upperLabel === "C" || upperLabel === "D")
      throw "Label contains keyword: " + upperLabel;

    labels[label] = code.length;
  };

  var promises = lines.map((line) => parseLine(line));
  for (var i = 0; i < promises.length; i++) {
    var result = await promises[i];
    if (result.label) {
      addLabel(result.label);
    }

    code.push.apply(code, result.codes);
  }

  // Replace label
  for (i = 0, l = code.length; i < l; i++) {
    if (isNaN(parseInt(code[i]))) {
      if (code[i] in labels) {
        code[i] = labels[code[i]];
      } else {

        throw {error: "Undefined label: " + code[i]};
      }
    }
  }

  return code;
}

// Constants
const PORT = 80;
const HOST = '0.0.0.0';

// App
const app = express();
app.use(express.json())
app.post('/', async (req, res, next) => {
  var content = req.body.content;
  var result = await assembler(content);
  res.json(result);
});

app.listen(PORT, HOST);

console.log(`Running on http://${HOST}:${PORT}`);

